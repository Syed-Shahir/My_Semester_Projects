#!/bin/bash



# Function to predict CPU usage using idle time

cpu_usage() {

    idle=$(mpstat 1 1 | awk 'NR==4 {print $NF}')

    cpu_usage=$(echo "100 - $idle" | bc)

    echo $cpu_usage

}



# Function to calculate energy consumption

calculate_energy_consumption() {

    local power=$1

    local time_interval=$2

    local conversion_factor=0.002 # Adjust this value based on observed behavior

    local energy_consumption=$(echo "$power * $time_interval * $conversion_factor" | bc)

    echo $energy_consumption

}



# Function to toggle CPU cores based on predicted usage

toggle_cpu_cores() {

    local threshold=25

    local power=$(mpstat 1 1 | awk '$12 ~ /[0-9.]+/ {print 1 - $12}')

    local time_interval=2

    local energy_consumption=$(calculate_energy_consumption $power $time_interval)

    echo "Energy Consumption at Decision Point: $energy_consumption joules"

    

    local y1=$(cpu_usage)

    sleep 2

    local y2=$(cpu_usage)

    local predicted_usage=$(echo "scale=2; ($y1 + $y2) / 2" | bc)

    echo "First usage: $y1"

    echo "Second usage: $y2"

    

    #local predicted_usage=$(predict_cpu_usage)

    echo "CPU Usage at Decision Point: $predicted_usage%"

    if (( $(echo "$predicted_usage >= $threshold" | bc -l) )); then

        echo "High predicted CPU usage. Turning ON all CPU cores."

        sudo bash -c "echo 1 > /sys/devices/system/cpu/cpu*/online"

    else

        echo "Low predicted CPU usage. Turning OFF all CPU cores except the first one."

        sudo bash -c "echo 0 > /sys/devices/system/cpu/cpu{1..$(($(nproc --all) - 1))}/online"

    fi

    

    # Count total CPUs

	local total_cpus=$(nproc --all)



	# Calculate online CPUs

	online_cpus=$(cat /sys/devices/system/cpu/online | awk -F'-' '{print $2 - $1 + 1}')





	echo "Total CPUs: $total_cpus"

	echo "Online CPUs: $online_cpus"

}



# Main loop

while true; do

    toggle_cpu_cores

    time_interval=2 # Adjust the time interval as needed

    sleep $time_interval

done